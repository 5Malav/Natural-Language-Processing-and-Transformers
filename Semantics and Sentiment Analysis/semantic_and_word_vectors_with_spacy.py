# -*- coding: utf-8 -*-
"""Semantic and Word Vectors with Spacy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12o6VD76iu3DYu3_CvD1adHcWWqiLM4RN
"""

import spacy

!python -m spacy download en_core_web_lg # Download the en_core_web_lg model

nlp = spacy.load("en_core_web_lg")
nlp

nlp(u'lion').vector

# Vector components for the string lion

nlp(u' I work at TD insurance').vector.shape

# Let's try to identify similar vectors

# The best way to expose vector relationships is
# through the dot_similarity method of the actual document tokens.

tokens = nlp(u'lion cat pet')

for token1 in tokens:
    for token2 in tokens:
        print(token1.text,token2.text,token1.similarity(token2))

tokens = nlp(u'Mrugesh Maya Malav Minaxi')

for token1 in tokens:
    for token2 in tokens:
        print(token1.text,token2.text,token1.similarity(token2))

# So we have to keep in mind that
# words which have opposite meaning but that often appear
# in the same context may actually have similar vector as well.

tokens= nlp(u'like love hate')

for token1 in tokens:
    for token2 in tokens:
        print(token1.text,token2.text,token1.similarity(token2))

nlp.vocab.vectors

len(nlp.vocab.vectors)

nlp.vocab.vectors.shape

tokens= nlp(u'dog cat nargle')

for token in tokens:
    print(token.text,token.has_vector,token.vector_norm,token.is_oov)

tokens= nlp(u'dog cat Joshi')

for token in tokens:
    print(token.text,token.has_vector,token.vector_norm,token.is_oov)

# vector arithmetic

from scipy import spatial

cosine_similarity = lambda vec1,vec2: 1- spatial.distance.cosine(vec1,vec2)

king = nlp(u'king').vector
man = nlp(u'man').vector
woman = nlp(u'woman').vector

# king - man + woman -> brand new vector similar to queen,princess,highness


new_vector = king - man + woman

computed_similarities=[]

# for all words in vocab

for word in nlp.vocab:
    if word.has_vector:
        if word.is_lower:
            if word.is_alpha:
                similarity = cosine_similarity(new_vector,word.vector)
                computed_similarities.append((word,similarity))

# descending order

computed_similarities= sorted(computed_similarities,key=lambda item:-item[1])

computed_similarities[1:10]

print([t[0].text for t in computed_similarities[:10]])