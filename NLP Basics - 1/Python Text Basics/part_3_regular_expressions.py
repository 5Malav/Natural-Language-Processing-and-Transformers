# -*- coding: utf-8 -*-
"""Part - 3 Regular Expressions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UuqH6tV1EjCyPyL-1GRLXQu_Ks9Bo7Av

# Regular Expressions in Python


Regular Expressions (sometimes called regex for short) allow a user to search for strings using almost any sort of rule they can come up with. For example, finding all capital letters in a string, or finding a phone number in a document.

Regular expressions are notorious for their seemingly strange syntax. This strange syntax is a byproduct of their flexibility. Regular expressions have to be able to filter out any string pattern you can imagine, which is why they have a complex string pattern format.

Regular expressions allow for patten searching in a text document.

The syntax for regular expressions can be:

r'\d{3}-\d{3}\d{4}'

The key thing to keep in mind is that every character type has a
correspnding pattern code.

For example, digits have the placeholder pattern code of \d

The use of backslash allows python to understand that it is a special
code and not the letter "d".
"""

text = "The phone number of machine learning engineer is 555-123-1879. \
call soon"

"555-123-1879" in text

# Without regular expression is search for is there any phone number
# with this particular format inside of this text?

import re

pattern = "phone"

re.search(pattern,text)

my_match=re.search(pattern,text)
my_match.span()

my_match.start()

my_match.end()

txt ="my phone is a new phone"

match= re.search(pattern,txt)
match.span()

re.findall(pattern,txt)
# to find all matches

len(re.findall(pattern,txt))

# To find match objects instead of just a list of
# of the matches, which is not very useful.

for match in re.finditer("phone",txt):
    print(match.span())

"""# Patterns

So far we've seen how to search for a basic string. What about more complex examples? Such as trying to find a telephone number in a large string of text? Or an email address?

We could just use search method if we know the exact phone or email, but what if we don't know it? We may know the general format, and we can use that along with regular expressions to search the document for strings that match a particular pattern.

This is where the syntax may appear strange at first, but take your time with this; often it's just a matter of looking up the pattern code.

## Identifiers for Characters in Patterns

Characters such as a digit or a single string have different codes that represent them. You can use these to build up a pattern string. Notice how these make heavy use of the backwards slash \ . Because of this when defining a pattern string for regular expression we use the format:

    r'mypattern'
    
placing the r in front of the string allows python to understand that the \ in the pattern string are not meant to be escape slashes.

All the possible identifiers:

<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>

<tr ><td><span >\d</span></td><td>A digit</td><td>file_\d\d</td><td>file_25</td></tr>

<tr ><td><span >\w</span></td><td>Alphanumeric</td><td>\w-\w\w\w</td><td>A-b_1</td></tr>



<tr ><td><span >\s</span></td><td>White space</td><td>a\sb\sc</td><td>a b c</td></tr>



<tr ><td><span >\D</span></td><td>A non digit</td><td>\D\D\D</td><td>ABC</td></tr>

<tr ><td><span >\W</span></td><td>Non-alphanumeric</td><td>\W\W\W\W\W</td><td>*-+=)</td></tr>

<tr ><td><span >\S</span></td><td>Non-whitespace</td><td>\S\S\S\S</td><td>Yoyo</td></tr></table>
"""

text ="The phone number of machine learning engineer is 555-123-1879. call soon"
text

pattern = r'\d\d\d-\d\d\d-\d\d\d\d'

phone_number = re.search(pattern,text)
phone_number

phone_number.group()

# will collect all span(49,61) and will print it.

"""To avoid typing "\d" mutiple times.

Let's explore the possible quantifiers.

## Quantifiers

Now that we know the special character designations, we can use them along with quantifiers to define how many we expect.

<table ><tr><th>Character</th><th>Description</th><th>Example Pattern Code</th><th >Exammple Match</th></tr>

<tr ><td><span >+</span></td><td>Occurs one or more times</td><td>	Version \w-\w+</td><td>Version A-b1_1</td></tr>

<tr ><td><span >{3}</span></td><td>Occurs exactly 3 times</td><td>\D{3}</td><td>abc</td></tr>



<tr ><td><span >{2,4}</span></td><td>Occurs 2 to 4 times</td><td>\d{2,4}</td><td>123</td></tr>



<tr ><td><span >{3,}</span></td><td>Occurs 3 or more</td><td>\w{3,}</td><td>anycharacters</td></tr>

<tr ><td><span >\*</span></td><td>Occurs zero or more times</td><td>A\*B\*C*</td><td>AAACC</td></tr>

<tr ><td><span >?</span></td><td>Once or none</td><td>plurals?</td><td>plural</td></tr></table>
"""

pattern = r'\d{3}-\d{3}-\d{4}'

phone_number=re.search(pattern,text)
phone_number

phone_number.group()

# Regular expression has ability to select
# separate groups
# pattern = r'\d{3}-\d{3}-\d{4}'

# currently this entire phrase for the pattern is one solid
# group. But we can compile separate groups using parentheses.
# ()

pattern = r'(\d{3})-(\d{3})-(\d{4})'

phone_number=re.search(pattern,text)
phone_number

phone_number.group()

phone_number.group(1)

phone_number.group(2)

phone_number.group(3)

# phone_number.group(4)
# IndexError: no such group
# because matches has only 3 groups

# pipe | operator
# will print match that comes first in text.

re.search(r"male|female","This male and female are here")

re.search(r"female|male","This male and female are here")

re.search(r"female|male","This female and male are here")

# match only 1 character

re.findall(r".at","The cat in the hat sat pet")

re.findall(r"...at","The cat in the hat sat plat slat")

# Start With and Ends With
# we can use the ^ to signal starts with and
# the $ to signal ends with

re.findall(r"\d$","This text ends with a number 2")

re.findall(r"^\d","100 divide by 2 is 50")

txt = "There are 5 number inside this 3 sentence"
txt

re.findall(r"[^\d]",txt)

# exclude any digits

# to get all words back together...
re.findall(r"[^\d]+",txt)

# To remove punctuation from a sentence
# which is a common thing we have to do when working
# with text data

test_txt = "This is a sample string!!! but it has \
punctuation. please remove it. possible? "

my_list= re.findall(r"[^|!?.]+",test_txt)
my_list

" ".join(my_list)

# + sign with [] for grouping

text = "Only find the machine-learning topics. where \
can you-find computer vision learning sources?"

re.findall(r"[\w]+-[\w]",text)
# grab alpha numeric