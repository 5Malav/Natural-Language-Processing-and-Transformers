# -*- coding: utf-8 -*-
"""Project 4: Email Spam Filter using Naive Bayes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d0HR4GSgNC9sviRYtvKbkm4RrJZCFACC

# Problem Statement

-> Build a email spam classifier using Naive Bayes
"""

# Import Libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.naive_bayes import MultinomialNB

from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report,confusion_matrix

data=pd.read_csv("/content/emails.csv")
data.head()

data.info()

data['spam'].value_counts()

data['text'][0]

data.describe()

ham= data[data['spam']==0]
ham

spam = data[data['spam']==1]
spam

print("Spam % :- ", (len(spam)/len(data))*100,'%')

print("ham % :- ", (len(ham)/len(data))*100,'%')

sns.countplot(x='spam', data=data)
plt.title('Spam vs Ham Count')
plt.xlabel('Email Type (0: Ham, 1: Spam)')
plt.ylabel('Count')
plt.show()

# Example
sample_data = ["Malav Joshi. I work for TD Insurance.My plan is to transition into Data Analytics job."]

sample_count= CountVectorizer()
X = sample_count.fit_transform(sample_data)
print(X.toarray())

print(sample_count.get_feature_names_out())

# Applying Countvectorizer to dataset

Vectorizer=CountVectorizer()

data_countvectorizer = Vectorizer.fit_transform(data['text'])
data_countvectorizer

print(Vectorizer.get_feature_names_out())

print(data_countvectorizer.toarray())

data_countvectorizer.shape

label=data['spam'].values
label

# Train the Model

model = MultinomialNB()
model.fit(data_countvectorizer,label)

test_sample=['Free money!!!',\
             'hope you are doing well. Just a reminder that we have a team meeting tomorrow at 10 AM in the conference room.']

test_countvectorizer = Vectorizer.transform(test_sample)
test_countvectorizer

model.predict(test_countvectorizer)

X = data_countvectorizer
X.shape

y = label
y

# Divide data in train and test

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

model = MultinomialNB()

model.fit(X_train,y_train)

# Evaluating the model

pred_train = model.predict(X_train)
print(pred_train)

pred_test = model.predict(X_test)
print(pred_test)

cm_train = confusion_matrix(y_train,pred_train)
print(cm_train)
sns.heatmap(cm_train,annot=True)

cm_test = confusion_matrix(y_test,pred_test)
print(cm_test)
sns.heatmap(cm_test,annot=True)

report= classification_report(y_test,pred_test,output_dict=True)
report

report=pd.DataFrame(report).transpose()
report